name: Tests, Build and Push Docker Image

on:
  push:
    branches:
      - main
      - homolog
      - feature/pipelines

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    if: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '21'

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Build with Maven
      run: mvn -f backend/pom.xml clean install --no-transfer-progress

    - name: Run unit tests
      run: mvn -f backend/pom.xml test --no-transfer-progress
  
  code-analysis:
    runs-on: ubuntu-latest
    needs: unit-tests
    if: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '21'

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Run SonarCloud Analysis
      run: |
        mvn -f backend/pom.xml org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.1.2184:sonar \
          -Dsonar.projectKey=smthiago_snackbar \
          -Dsonar.organization=smthiago\
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  build-and-push:
    runs-on: ubuntu-latest
    needs: [unit-tests, code-analysis]
    if: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set Docker image tag based on branch
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "IMAGE_TAG=latest" >> $GITHUB_ENV
        elif [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
          echo "IMAGE_TAG=homolog" >> $GITHUB_ENV
        fi

    - name: Set Docker repo Snackbar
      run: echo "DOCKER_REPO_SNACKBAR=snackbar" >> $GITHUB_ENV

    - name: Set Docker repo MONGODB
      run: echo "DOCKER_REPO_MONGODB=mongo-snackbar" >> $GITHUB_ENV
      
    - name: Build and push Snackbar Docker image
      run: |
        set -x
        cd backend
        docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_REPO_SNACKBAR }}:${{ env.IMAGE_TAG }} --push --no-cache .

    - name: Build and push MongoDB Docker image
      run: |
          set -x
          cd database
          docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_REPO_MONGODB }}:${{ env.IMAGE_TAG }} --push --no-cache .

    - name: Docker logout
      run: docker logout

  provision_kubernetes:
    runs-on: ubuntu-latest
    #needs: build-and-push

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install curl, AWS CLI and Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Install Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
          wget -O- https://apt.releases.hashicorp.com/gpg | \
          gpg --dearmor | \
          sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null

          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
          https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
          sudo tee /etc/apt/sources.list.d/hashicorp.list

          sudo apt update && sudo apt-get install -y terraform
        continue-on-error: false

      - name: Run Kubernetes provision script
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: |
          ./infra/scripts/start-eks.sh
